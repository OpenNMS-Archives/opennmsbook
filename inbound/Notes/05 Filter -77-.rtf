{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf350
\stshfdbch0{\fonttbl\f0\froman\fcharset0 Times-Roman;\f1\fmodern\fcharset0 Courier;\f2\fmodern\fcharset0 Courier-Bold;
}
{\colortbl;\red255\green255\blue255;\red4\green0\blue240;\red5\green0\blue255;}
{\stylesheet {\s0 Normal;}}
{\info
{\author Alexander Finger}
{\creatim\yr2011\mo6\dy21\hr15\min12\sec30\timesinceref330379950}
{\revtim\yr2011\mo6\dy24\hr10\min15\sec7\timesinceref330621307}}\deftab720
\pard\pardeftab720\sa240\ql\qnatural

\f0\fs24 \cf0 Filter\
Added text w/ viThink of the filter (also referred to as a rule) as a shorthand SQL statement that automatically selects ipaddr from the ipinterface table. You are basically building the WHERE clause with the rule that you write. There is an XML file called {\field{\*\fldinst{HYPERLINK "http://opennms.svn.sourceforge.net/viewvc/opennms/opennms/trunk/opennms-base-assembly/src/main/filtered/etc/database-schema.xml?view=markup"}}{\fldrslt \cf2 \ul \ulc2 database-schema.xml}} in the /opt/opennms/etc directory that informs the filter code of what tables it can use in building the WHERE clause. Here is an explaination of that file:\
Each table used by the filter code is in a <table> tag. If a table has an attribute of 'visible=false' then no columns in that table can be used in the WHERE clause and thus can't appear in the rule. You will get some sort of syntax exception if it sees any non-visible columns in the rule. The same applies to a non-visible column in a table.\
A <join> tag tells the filter module how to relate this table to the ipinterface table. The ipinterface table is marked with the attribute 'key=primary', meaning that it is going to be the table we select ipaddr from and join all other tables to.\
In brief, you can use C / Java-style comparison operators to data types they apply to ( == and\'a0!= can be used on strings, as can the SQL 
\i LIKE
\i0  keyword).\
For 
\i LIKE
\i0  comparisons, the character 
\b _
\b0  matches any single character and 
\b %
\b0  matches any series of characters (or none at all). For example, 'F_o%' matches 'Foo', 'Foom' and 'Flowers' but not 'Foip'.\
For handling NULL values (which includes cases where you've joined across to a table where there is no matching row), the 
\i IS NULL
\i0  and 
\i IS NOT NULL
\i0  operators can be used. It's important to note that comparing a null value to anything with any other operator always returns false, so\
\pard\pardeftab720\ql\qnatural

\f1 \cf0 categoryName\'a0!= 'SomeCategory'\
\pard\pardeftab720\sa240\ql\qnatural

\f0 \cf0 will not return you anything with a null categoryName. Instead you probably need to use\
\pard\pardeftab720\ql\qnatural

\f1 \cf0 categoryName\'a0!= 'SomeCategory' | categoryName IS NULL\
\pard\pardeftab720\sa240\ql\qnatural

\f0 \cf0 You can group expressions using parentheses and apply boolean operators anywhere in an expression. Note that, in a departure from C / Java convention, boolean operators are single characters rather than double, so they look more like the bitwise arithmetic operators in C:\
\pard\pardeftab720\ql\qnatural
\cf0 AND\'a0\
&\
OR\'a0\
|\
NOT\'a0\
\'a0!\
\pard\pardeftab720\sa240\ql\qnatural
\cf0 Each comparision is joined together with the & or | operators meaning logical AND, logical OR operations. Anything delimited by an & or | character gets translated into a sub-select that selects the ipaddr based on the comparision for that clause. Here is an example:\
Rule:\
\pard\pardeftab720\ql\qnatural

\f1 \cf0 (nodesysname == 'something') & (snmpifdescr == 'something else')\
\pard\pardeftab720\sa240\ql\qnatural

\f0 \cf0 SQL:\
\pard\pardeftab720\ql\qnatural

\f1 \cf0 SELECT ipaddr\
FROM ipinterface\
WHERE ipaddr in (SELECT ipaddr FROM ipinterface, node\
                 WHERE nodesysname='something'\
                 AND ipinterface.nodeid =node.nodeid)\
AND   ipaddr in (SELECT ipaddr FROM ipinterface, snmpInterface\
                 WHERE snmpifdescr='something else'\
                 AND ipinterface.ipaddr = snmpInterface.ipaddr);\
\pard\pardeftab720\sa240\ql\qnatural

\f0 \cf0 The IPLIKE function is a short hand to call a Postgres function that was written in C to compare ipaddresses using *, lists and ranges. is<Service> is a shorthand to build a complicated join to match on a service name. notis<Service> can be used since 1.2.7 or so.\
\pard\pardeftab720\sa280\ql\qnatural

\b\fs36 \cf0 [{\field{\*\fldinst{HYPERLINK "http://www.opennms.org/w/index.php?title=Filters&action=edit&section=1"}}{\fldrslt \cf2 \ul \ulc2 edit}}] Components of openNMS that use filters\
\pard\pardeftab720\ql\qnatural

\b0\fs24 \cf0 notifd\'a0\
Notification rules control whether or not a received event triggers a notification. Each event is tested against the rules in notifications.xml looking for a match. When a match is found, the corresponding notification is sent. The default for most notifications is "IPADDR IPLIKE *.*.*.*", however, any valid rule may be used. To do an exclusive filter use "!(IPADDR IPLIKE 169.254.*.*)". This allows you to be very granular when defining what to alert on.\
collectd\'a0\
Controls which IP interfaces are included in a collection package. Evaluated at startup.\
pollerd\'a0\
Controls which IP interfaces are included in a polling package. Evaluated at startup.\
rtcd\'a0\
Controls which IP interfaces are included in the various categories that are shown on the front page in the webUI. Evaluated at startup and when a "uei.opennms.org/nodes/assetInfoChanged" event is received (usually generated when asset information is changed in the webUI).\
threshd\'a0\
Controls which IP interfaces are included in a thresholding package. Evaluated at startup.\
webUI\'a0\
The webUI uses filters to validate rules when configuring notifications. This insures that the rule will be syntactically correct, and it allows the administrator to preview the list of matching interfaces before finalizing the notification.\
Filters are also used with rules when configuring path outages to select a list of nodes that lie behind the specified outage path. This list may be previewed before finalizing the configuration.\
\pard\pardeftab720\sa280\ql\qnatural

\b\fs36 \cf0 [{\field{\*\fldinst{HYPERLINK "http://www.opennms.org/w/index.php?title=Filters&action=edit&section=2"}}{\fldrslt \cf2 \ul \ulc2 edit}}] So How do I use them?\
\pard\pardeftab720\sa240\ql\qnatural

\b0\fs24 \cf0 Rules can be much richer than simply filtering by IP, you can use parameters from nodes, categories etc. Parameters not present in database-schema.xml can be added for use in filter expressions, as long as the existing database table hierarchy is followed. Here is a partial list:\
\pard\pardeftab720\ql\qnatural
\cf0 Pollers\'a0\
dpNumber\
dpName\
dpIP\
dpComment\
dpDiscLimit\
dpAdminState\
dpRunState\
Nodes\'a0\
nodeID\
dpName\
nodeCreateTime\
nodeParentID\
nodeType\
nodeSysOID\
nodeSysName\
nodeSysDescription\
nodeSysLocation\
nodeSysContact\
nodeLabel\
Catagories\'a0\
categoryID\
categoryName\
categoryDescription\
Applications\
name - This field is used for alerting on user defined Applications, that span multiple systems and services.\
IpInterface\'a0\
ipAddr\
ipHostname\
isManaged\
ipStatus\
ipLastCapsdPoll\
SNMP Interface\
snmpIpAdEntNetMask\
snmpPhysAddr\
snmpIfIndex\
snmpIfDescr\
snmpIfType\
snmpIfSpeed\
snmpIfAlias (from 1.6.6 and 1.7.4)\
snmpIfAdminStatus\
snmpIfOperStatus\
Services\'a0\
serviceName\
ifServices\'a0\
serviceID\
lastGood\
lastFail\
Server Map\'a0\
serverName\
Service Map\'a0\
serviceMapName\
Assets\'a0\
displayCategory\
notifyCategory\
pollerCategory\
thresholdCategory\
category\
manufacturer\
vendor\
modelnumber\
serialnumber\
description\
circuitid\
assetnumber\
operatingsystem\
rack\
slot\
port\
region\
division\
department\
address1\
address2\
city\
state\
zip\
building\
floor\
room\
vendorphone\
vendorfax\
vendorassetnumber\
lease\
leaseexpires\
supportphone\
maintcontract\
maintcontractexpires\
comment\
managedobjectinstance\
managedobjecttype\
\pard\pardeftab720\sa280\ql\qnatural

\b\fs36 \cf0 [{\field{\*\fldinst{HYPERLINK "http://www.opennms.org/w/index.php?title=Filters&action=edit&section=3"}}{\fldrslt \cf2 \ul \ulc2 edit}}] Configuration examples\
\pard\pardeftab720\sa240\ql\qnatural

\b0\fs24 \cf0 There are at least two formats which these rules can exist on the xml level (GUI format to follow).\
In this first example, the entire rule is wrapped in "<![CDATA[...]]>" so that ampersands ("&") do not have to be escaped (the CDATA bits are in bold and in blue):\
\pard\pardeftab720\ql\qnatural

\f1 \cf0 <rule>
\f2\b \cf3 <![CDATA[
\f1\b0 \cf0 (IPADDR\'a0!= '0.0.0.0') & (IPADDR IPLIKE 192.168.1.1-154) & (isSMTP | isPOP3 ) & (categoryName == 'Production')
\f2\b \cf3 ]]>
\f1\b0 \cf0 </rule>\
\pard\pardeftab720\sa240\ql\qnatural

\f0 \cf0 In this example, instead of using the CDATA construct above, the ampersands are escaped as "&amp;" (in bold and in blue):\
\pard\pardeftab720\ql\qnatural

\f1 \cf0 <rule>(IPADDR\'a0!= '0.0.0.0' \cf3 &amp;\cf0  (IPADDR IPLIKE 192.168.1.1-154) \cf3 &amp;\cf0  (isSMTP | isPOP3 ) \cf3 &amp;\cf0  (categoryName == 'Production'))</rule>\
\pard\pardeftab720\sa240\ql\qnatural

\f0 \cf0 For the GUI you simply drop in the unescaped value into the text field:\
\pard\pardeftab720\ql\qnatural

\f1 \cf0 (IPADDR\'a0!= '0.0.0.0' & (IPADDR IPLIKE 192.168.1.1-154) & (isSMTP | isPOP3 ) & (categoryName == 'Production'))\
\pard\pardeftab720\ql\qnatural

\f0 \cf0 catinc\
\pard\pardeftab720\sa240\ql\qnatural
\cf0 Sometimes you need to include hosts belonging to more than one Category, via an AND operator. eg. All hosts that belong to BOTH Production and Linux groups need to be included. It is not currently possible to do this using any variation of eg. (categoryName == 'Production') & (categoryName == 'Linux').\
The "catinc" function is used the following way. Note Category names can not have spaces for this to work:\
\pard\pardeftab720\ql\qnatural

\f1 \cf0 <rule> <![CDATA[((IPADDR\'a0!= '0.0.0.0') & catincProduction & catincLinux)]]> </rule>\
}